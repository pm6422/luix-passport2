/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables.pojos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Arrays;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Oauth2Authorization implements Serializable {

    private static final long serialVersionUID = 1L;

    private String id;
    private String registeredClientId;
    private String principalName;
    private String authorizationGrantType;
    private String authorizedScopes;
    private byte[] attributes;
    private String state;
    private byte[] authorizationCodeValue;
    private LocalDateTime authorizationCodeIssuedAt;
    private LocalDateTime authorizationCodeExpiresAt;
    private byte[] authorizationCodeMetadata;
    private byte[] accessTokenValue;
    private LocalDateTime accessTokenIssuedAt;
    private LocalDateTime accessTokenExpiresAt;
    private byte[] accessTokenMetadata;
    private String accessTokenType;
    private String accessTokenScopes;
    private byte[] oidcIdTokenValue;
    private LocalDateTime oidcIdTokenIssuedAt;
    private LocalDateTime oidcIdTokenExpiresAt;
    private byte[] oidcIdTokenMetadata;
    private byte[] refreshTokenValue;
    private LocalDateTime refreshTokenIssuedAt;
    private LocalDateTime refreshTokenExpiresAt;
    private byte[] refreshTokenMetadata;
    private byte[] userCodeValue;
    private LocalDateTime userCodeIssuedAt;
    private LocalDateTime userCodeExpiresAt;
    private byte[] userCodeMetadata;
    private byte[] deviceCodeValue;
    private LocalDateTime deviceCodeIssuedAt;
    private LocalDateTime deviceCodeExpiresAt;
    private byte[] deviceCodeMetadata;

    public Oauth2Authorization() {}

    public Oauth2Authorization(Oauth2Authorization value) {
        this.id = value.id;
        this.registeredClientId = value.registeredClientId;
        this.principalName = value.principalName;
        this.authorizationGrantType = value.authorizationGrantType;
        this.authorizedScopes = value.authorizedScopes;
        this.attributes = value.attributes;
        this.state = value.state;
        this.authorizationCodeValue = value.authorizationCodeValue;
        this.authorizationCodeIssuedAt = value.authorizationCodeIssuedAt;
        this.authorizationCodeExpiresAt = value.authorizationCodeExpiresAt;
        this.authorizationCodeMetadata = value.authorizationCodeMetadata;
        this.accessTokenValue = value.accessTokenValue;
        this.accessTokenIssuedAt = value.accessTokenIssuedAt;
        this.accessTokenExpiresAt = value.accessTokenExpiresAt;
        this.accessTokenMetadata = value.accessTokenMetadata;
        this.accessTokenType = value.accessTokenType;
        this.accessTokenScopes = value.accessTokenScopes;
        this.oidcIdTokenValue = value.oidcIdTokenValue;
        this.oidcIdTokenIssuedAt = value.oidcIdTokenIssuedAt;
        this.oidcIdTokenExpiresAt = value.oidcIdTokenExpiresAt;
        this.oidcIdTokenMetadata = value.oidcIdTokenMetadata;
        this.refreshTokenValue = value.refreshTokenValue;
        this.refreshTokenIssuedAt = value.refreshTokenIssuedAt;
        this.refreshTokenExpiresAt = value.refreshTokenExpiresAt;
        this.refreshTokenMetadata = value.refreshTokenMetadata;
        this.userCodeValue = value.userCodeValue;
        this.userCodeIssuedAt = value.userCodeIssuedAt;
        this.userCodeExpiresAt = value.userCodeExpiresAt;
        this.userCodeMetadata = value.userCodeMetadata;
        this.deviceCodeValue = value.deviceCodeValue;
        this.deviceCodeIssuedAt = value.deviceCodeIssuedAt;
        this.deviceCodeExpiresAt = value.deviceCodeExpiresAt;
        this.deviceCodeMetadata = value.deviceCodeMetadata;
    }

    public Oauth2Authorization(
        String id,
        String registeredClientId,
        String principalName,
        String authorizationGrantType,
        String authorizedScopes,
        byte[] attributes,
        String state,
        byte[] authorizationCodeValue,
        LocalDateTime authorizationCodeIssuedAt,
        LocalDateTime authorizationCodeExpiresAt,
        byte[] authorizationCodeMetadata,
        byte[] accessTokenValue,
        LocalDateTime accessTokenIssuedAt,
        LocalDateTime accessTokenExpiresAt,
        byte[] accessTokenMetadata,
        String accessTokenType,
        String accessTokenScopes,
        byte[] oidcIdTokenValue,
        LocalDateTime oidcIdTokenIssuedAt,
        LocalDateTime oidcIdTokenExpiresAt,
        byte[] oidcIdTokenMetadata,
        byte[] refreshTokenValue,
        LocalDateTime refreshTokenIssuedAt,
        LocalDateTime refreshTokenExpiresAt,
        byte[] refreshTokenMetadata,
        byte[] userCodeValue,
        LocalDateTime userCodeIssuedAt,
        LocalDateTime userCodeExpiresAt,
        byte[] userCodeMetadata,
        byte[] deviceCodeValue,
        LocalDateTime deviceCodeIssuedAt,
        LocalDateTime deviceCodeExpiresAt,
        byte[] deviceCodeMetadata
    ) {
        this.id = id;
        this.registeredClientId = registeredClientId;
        this.principalName = principalName;
        this.authorizationGrantType = authorizationGrantType;
        this.authorizedScopes = authorizedScopes;
        this.attributes = attributes;
        this.state = state;
        this.authorizationCodeValue = authorizationCodeValue;
        this.authorizationCodeIssuedAt = authorizationCodeIssuedAt;
        this.authorizationCodeExpiresAt = authorizationCodeExpiresAt;
        this.authorizationCodeMetadata = authorizationCodeMetadata;
        this.accessTokenValue = accessTokenValue;
        this.accessTokenIssuedAt = accessTokenIssuedAt;
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        this.accessTokenMetadata = accessTokenMetadata;
        this.accessTokenType = accessTokenType;
        this.accessTokenScopes = accessTokenScopes;
        this.oidcIdTokenValue = oidcIdTokenValue;
        this.oidcIdTokenIssuedAt = oidcIdTokenIssuedAt;
        this.oidcIdTokenExpiresAt = oidcIdTokenExpiresAt;
        this.oidcIdTokenMetadata = oidcIdTokenMetadata;
        this.refreshTokenValue = refreshTokenValue;
        this.refreshTokenIssuedAt = refreshTokenIssuedAt;
        this.refreshTokenExpiresAt = refreshTokenExpiresAt;
        this.refreshTokenMetadata = refreshTokenMetadata;
        this.userCodeValue = userCodeValue;
        this.userCodeIssuedAt = userCodeIssuedAt;
        this.userCodeExpiresAt = userCodeExpiresAt;
        this.userCodeMetadata = userCodeMetadata;
        this.deviceCodeValue = deviceCodeValue;
        this.deviceCodeIssuedAt = deviceCodeIssuedAt;
        this.deviceCodeExpiresAt = deviceCodeExpiresAt;
        this.deviceCodeMetadata = deviceCodeMetadata;
    }

    /**
     * Getter for <code>luix-passport.oauth2_authorization.id</code>.
     */
    @NotNull
    @Size(max = 100)
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>luix-passport.oauth2_authorization.id</code>.
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.registered_client_id</code>.
     */
    @NotNull
    @Size(max = 100)
    public String getRegisteredClientId() {
        return this.registeredClientId;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.registered_client_id</code>.
     */
    public void setRegisteredClientId(String registeredClientId) {
        this.registeredClientId = registeredClientId;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.principal_name</code>.
     */
    @NotNull
    @Size(max = 200)
    public String getPrincipalName() {
        return this.principalName;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.principal_name</code>.
     */
    public void setPrincipalName(String principalName) {
        this.principalName = principalName;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.authorization_grant_type</code>.
     */
    @NotNull
    @Size(max = 100)
    public String getAuthorizationGrantType() {
        return this.authorizationGrantType;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.authorization_grant_type</code>.
     */
    public void setAuthorizationGrantType(String authorizationGrantType) {
        this.authorizationGrantType = authorizationGrantType;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.authorized_scopes</code>.
     */
    @Size(max = 1000)
    public String getAuthorizedScopes() {
        return this.authorizedScopes;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.authorized_scopes</code>.
     */
    public void setAuthorizedScopes(String authorizedScopes) {
        this.authorizedScopes = authorizedScopes;
    }

    /**
     * Getter for <code>luix-passport.oauth2_authorization.attributes</code>.
     */
    @Size(max = 65535)
    public byte[] getAttributes() {
        return this.attributes;
    }

    /**
     * Setter for <code>luix-passport.oauth2_authorization.attributes</code>.
     */
    public void setAttributes(byte[] attributes) {
        this.attributes = attributes;
    }

    /**
     * Getter for <code>luix-passport.oauth2_authorization.state</code>.
     */
    @Size(max = 500)
    public String getState() {
        return this.state;
    }

    /**
     * Setter for <code>luix-passport.oauth2_authorization.state</code>.
     */
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.authorization_code_value</code>.
     */
    @Size(max = 65535)
    public byte[] getAuthorizationCodeValue() {
        return this.authorizationCodeValue;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.authorization_code_value</code>.
     */
    public void setAuthorizationCodeValue(byte[] authorizationCodeValue) {
        this.authorizationCodeValue = authorizationCodeValue;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.authorization_code_issued_at</code>.
     */
    public LocalDateTime getAuthorizationCodeIssuedAt() {
        return this.authorizationCodeIssuedAt;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.authorization_code_issued_at</code>.
     */
    public void setAuthorizationCodeIssuedAt(LocalDateTime authorizationCodeIssuedAt) {
        this.authorizationCodeIssuedAt = authorizationCodeIssuedAt;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.authorization_code_expires_at</code>.
     */
    public LocalDateTime getAuthorizationCodeExpiresAt() {
        return this.authorizationCodeExpiresAt;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.authorization_code_expires_at</code>.
     */
    public void setAuthorizationCodeExpiresAt(LocalDateTime authorizationCodeExpiresAt) {
        this.authorizationCodeExpiresAt = authorizationCodeExpiresAt;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.authorization_code_metadata</code>.
     */
    @Size(max = 65535)
    public byte[] getAuthorizationCodeMetadata() {
        return this.authorizationCodeMetadata;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.authorization_code_metadata</code>.
     */
    public void setAuthorizationCodeMetadata(byte[] authorizationCodeMetadata) {
        this.authorizationCodeMetadata = authorizationCodeMetadata;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.access_token_value</code>.
     */
    @Size(max = 65535)
    public byte[] getAccessTokenValue() {
        return this.accessTokenValue;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.access_token_value</code>.
     */
    public void setAccessTokenValue(byte[] accessTokenValue) {
        this.accessTokenValue = accessTokenValue;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.access_token_issued_at</code>.
     */
    public LocalDateTime getAccessTokenIssuedAt() {
        return this.accessTokenIssuedAt;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.access_token_issued_at</code>.
     */
    public void setAccessTokenIssuedAt(LocalDateTime accessTokenIssuedAt) {
        this.accessTokenIssuedAt = accessTokenIssuedAt;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.access_token_expires_at</code>.
     */
    public LocalDateTime getAccessTokenExpiresAt() {
        return this.accessTokenExpiresAt;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.access_token_expires_at</code>.
     */
    public void setAccessTokenExpiresAt(LocalDateTime accessTokenExpiresAt) {
        this.accessTokenExpiresAt = accessTokenExpiresAt;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.access_token_metadata</code>.
     */
    @Size(max = 65535)
    public byte[] getAccessTokenMetadata() {
        return this.accessTokenMetadata;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.access_token_metadata</code>.
     */
    public void setAccessTokenMetadata(byte[] accessTokenMetadata) {
        this.accessTokenMetadata = accessTokenMetadata;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.access_token_type</code>.
     */
    @Size(max = 100)
    public String getAccessTokenType() {
        return this.accessTokenType;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.access_token_type</code>.
     */
    public void setAccessTokenType(String accessTokenType) {
        this.accessTokenType = accessTokenType;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.access_token_scopes</code>.
     */
    @Size(max = 1000)
    public String getAccessTokenScopes() {
        return this.accessTokenScopes;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.access_token_scopes</code>.
     */
    public void setAccessTokenScopes(String accessTokenScopes) {
        this.accessTokenScopes = accessTokenScopes;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.oidc_id_token_value</code>.
     */
    @Size(max = 65535)
    public byte[] getOidcIdTokenValue() {
        return this.oidcIdTokenValue;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.oidc_id_token_value</code>.
     */
    public void setOidcIdTokenValue(byte[] oidcIdTokenValue) {
        this.oidcIdTokenValue = oidcIdTokenValue;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.oidc_id_token_issued_at</code>.
     */
    public LocalDateTime getOidcIdTokenIssuedAt() {
        return this.oidcIdTokenIssuedAt;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.oidc_id_token_issued_at</code>.
     */
    public void setOidcIdTokenIssuedAt(LocalDateTime oidcIdTokenIssuedAt) {
        this.oidcIdTokenIssuedAt = oidcIdTokenIssuedAt;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.oidc_id_token_expires_at</code>.
     */
    public LocalDateTime getOidcIdTokenExpiresAt() {
        return this.oidcIdTokenExpiresAt;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.oidc_id_token_expires_at</code>.
     */
    public void setOidcIdTokenExpiresAt(LocalDateTime oidcIdTokenExpiresAt) {
        this.oidcIdTokenExpiresAt = oidcIdTokenExpiresAt;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.oidc_id_token_metadata</code>.
     */
    @Size(max = 65535)
    public byte[] getOidcIdTokenMetadata() {
        return this.oidcIdTokenMetadata;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.oidc_id_token_metadata</code>.
     */
    public void setOidcIdTokenMetadata(byte[] oidcIdTokenMetadata) {
        this.oidcIdTokenMetadata = oidcIdTokenMetadata;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.refresh_token_value</code>.
     */
    @Size(max = 65535)
    public byte[] getRefreshTokenValue() {
        return this.refreshTokenValue;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.refresh_token_value</code>.
     */
    public void setRefreshTokenValue(byte[] refreshTokenValue) {
        this.refreshTokenValue = refreshTokenValue;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.refresh_token_issued_at</code>.
     */
    public LocalDateTime getRefreshTokenIssuedAt() {
        return this.refreshTokenIssuedAt;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.refresh_token_issued_at</code>.
     */
    public void setRefreshTokenIssuedAt(LocalDateTime refreshTokenIssuedAt) {
        this.refreshTokenIssuedAt = refreshTokenIssuedAt;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.refresh_token_expires_at</code>.
     */
    public LocalDateTime getRefreshTokenExpiresAt() {
        return this.refreshTokenExpiresAt;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.refresh_token_expires_at</code>.
     */
    public void setRefreshTokenExpiresAt(LocalDateTime refreshTokenExpiresAt) {
        this.refreshTokenExpiresAt = refreshTokenExpiresAt;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.refresh_token_metadata</code>.
     */
    @Size(max = 65535)
    public byte[] getRefreshTokenMetadata() {
        return this.refreshTokenMetadata;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.refresh_token_metadata</code>.
     */
    public void setRefreshTokenMetadata(byte[] refreshTokenMetadata) {
        this.refreshTokenMetadata = refreshTokenMetadata;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.user_code_value</code>.
     */
    @Size(max = 65535)
    public byte[] getUserCodeValue() {
        return this.userCodeValue;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.user_code_value</code>.
     */
    public void setUserCodeValue(byte[] userCodeValue) {
        this.userCodeValue = userCodeValue;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.user_code_issued_at</code>.
     */
    public LocalDateTime getUserCodeIssuedAt() {
        return this.userCodeIssuedAt;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.user_code_issued_at</code>.
     */
    public void setUserCodeIssuedAt(LocalDateTime userCodeIssuedAt) {
        this.userCodeIssuedAt = userCodeIssuedAt;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.user_code_expires_at</code>.
     */
    public LocalDateTime getUserCodeExpiresAt() {
        return this.userCodeExpiresAt;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.user_code_expires_at</code>.
     */
    public void setUserCodeExpiresAt(LocalDateTime userCodeExpiresAt) {
        this.userCodeExpiresAt = userCodeExpiresAt;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.user_code_metadata</code>.
     */
    @Size(max = 65535)
    public byte[] getUserCodeMetadata() {
        return this.userCodeMetadata;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.user_code_metadata</code>.
     */
    public void setUserCodeMetadata(byte[] userCodeMetadata) {
        this.userCodeMetadata = userCodeMetadata;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.device_code_value</code>.
     */
    @Size(max = 65535)
    public byte[] getDeviceCodeValue() {
        return this.deviceCodeValue;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.device_code_value</code>.
     */
    public void setDeviceCodeValue(byte[] deviceCodeValue) {
        this.deviceCodeValue = deviceCodeValue;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.device_code_issued_at</code>.
     */
    public LocalDateTime getDeviceCodeIssuedAt() {
        return this.deviceCodeIssuedAt;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.device_code_issued_at</code>.
     */
    public void setDeviceCodeIssuedAt(LocalDateTime deviceCodeIssuedAt) {
        this.deviceCodeIssuedAt = deviceCodeIssuedAt;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.device_code_expires_at</code>.
     */
    public LocalDateTime getDeviceCodeExpiresAt() {
        return this.deviceCodeExpiresAt;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.device_code_expires_at</code>.
     */
    public void setDeviceCodeExpiresAt(LocalDateTime deviceCodeExpiresAt) {
        this.deviceCodeExpiresAt = deviceCodeExpiresAt;
    }

    /**
     * Getter for
     * <code>luix-passport.oauth2_authorization.device_code_metadata</code>.
     */
    @Size(max = 65535)
    public byte[] getDeviceCodeMetadata() {
        return this.deviceCodeMetadata;
    }

    /**
     * Setter for
     * <code>luix-passport.oauth2_authorization.device_code_metadata</code>.
     */
    public void setDeviceCodeMetadata(byte[] deviceCodeMetadata) {
        this.deviceCodeMetadata = deviceCodeMetadata;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Oauth2Authorization other = (Oauth2Authorization) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.registeredClientId == null) {
            if (other.registeredClientId != null)
                return false;
        }
        else if (!this.registeredClientId.equals(other.registeredClientId))
            return false;
        if (this.principalName == null) {
            if (other.principalName != null)
                return false;
        }
        else if (!this.principalName.equals(other.principalName))
            return false;
        if (this.authorizationGrantType == null) {
            if (other.authorizationGrantType != null)
                return false;
        }
        else if (!this.authorizationGrantType.equals(other.authorizationGrantType))
            return false;
        if (this.authorizedScopes == null) {
            if (other.authorizedScopes != null)
                return false;
        }
        else if (!this.authorizedScopes.equals(other.authorizedScopes))
            return false;
        if (this.attributes == null) {
            if (other.attributes != null)
                return false;
        }
        else if (!Arrays.equals(this.attributes, other.attributes))
            return false;
        if (this.state == null) {
            if (other.state != null)
                return false;
        }
        else if (!this.state.equals(other.state))
            return false;
        if (this.authorizationCodeValue == null) {
            if (other.authorizationCodeValue != null)
                return false;
        }
        else if (!Arrays.equals(this.authorizationCodeValue, other.authorizationCodeValue))
            return false;
        if (this.authorizationCodeIssuedAt == null) {
            if (other.authorizationCodeIssuedAt != null)
                return false;
        }
        else if (!this.authorizationCodeIssuedAt.equals(other.authorizationCodeIssuedAt))
            return false;
        if (this.authorizationCodeExpiresAt == null) {
            if (other.authorizationCodeExpiresAt != null)
                return false;
        }
        else if (!this.authorizationCodeExpiresAt.equals(other.authorizationCodeExpiresAt))
            return false;
        if (this.authorizationCodeMetadata == null) {
            if (other.authorizationCodeMetadata != null)
                return false;
        }
        else if (!Arrays.equals(this.authorizationCodeMetadata, other.authorizationCodeMetadata))
            return false;
        if (this.accessTokenValue == null) {
            if (other.accessTokenValue != null)
                return false;
        }
        else if (!Arrays.equals(this.accessTokenValue, other.accessTokenValue))
            return false;
        if (this.accessTokenIssuedAt == null) {
            if (other.accessTokenIssuedAt != null)
                return false;
        }
        else if (!this.accessTokenIssuedAt.equals(other.accessTokenIssuedAt))
            return false;
        if (this.accessTokenExpiresAt == null) {
            if (other.accessTokenExpiresAt != null)
                return false;
        }
        else if (!this.accessTokenExpiresAt.equals(other.accessTokenExpiresAt))
            return false;
        if (this.accessTokenMetadata == null) {
            if (other.accessTokenMetadata != null)
                return false;
        }
        else if (!Arrays.equals(this.accessTokenMetadata, other.accessTokenMetadata))
            return false;
        if (this.accessTokenType == null) {
            if (other.accessTokenType != null)
                return false;
        }
        else if (!this.accessTokenType.equals(other.accessTokenType))
            return false;
        if (this.accessTokenScopes == null) {
            if (other.accessTokenScopes != null)
                return false;
        }
        else if (!this.accessTokenScopes.equals(other.accessTokenScopes))
            return false;
        if (this.oidcIdTokenValue == null) {
            if (other.oidcIdTokenValue != null)
                return false;
        }
        else if (!Arrays.equals(this.oidcIdTokenValue, other.oidcIdTokenValue))
            return false;
        if (this.oidcIdTokenIssuedAt == null) {
            if (other.oidcIdTokenIssuedAt != null)
                return false;
        }
        else if (!this.oidcIdTokenIssuedAt.equals(other.oidcIdTokenIssuedAt))
            return false;
        if (this.oidcIdTokenExpiresAt == null) {
            if (other.oidcIdTokenExpiresAt != null)
                return false;
        }
        else if (!this.oidcIdTokenExpiresAt.equals(other.oidcIdTokenExpiresAt))
            return false;
        if (this.oidcIdTokenMetadata == null) {
            if (other.oidcIdTokenMetadata != null)
                return false;
        }
        else if (!Arrays.equals(this.oidcIdTokenMetadata, other.oidcIdTokenMetadata))
            return false;
        if (this.refreshTokenValue == null) {
            if (other.refreshTokenValue != null)
                return false;
        }
        else if (!Arrays.equals(this.refreshTokenValue, other.refreshTokenValue))
            return false;
        if (this.refreshTokenIssuedAt == null) {
            if (other.refreshTokenIssuedAt != null)
                return false;
        }
        else if (!this.refreshTokenIssuedAt.equals(other.refreshTokenIssuedAt))
            return false;
        if (this.refreshTokenExpiresAt == null) {
            if (other.refreshTokenExpiresAt != null)
                return false;
        }
        else if (!this.refreshTokenExpiresAt.equals(other.refreshTokenExpiresAt))
            return false;
        if (this.refreshTokenMetadata == null) {
            if (other.refreshTokenMetadata != null)
                return false;
        }
        else if (!Arrays.equals(this.refreshTokenMetadata, other.refreshTokenMetadata))
            return false;
        if (this.userCodeValue == null) {
            if (other.userCodeValue != null)
                return false;
        }
        else if (!Arrays.equals(this.userCodeValue, other.userCodeValue))
            return false;
        if (this.userCodeIssuedAt == null) {
            if (other.userCodeIssuedAt != null)
                return false;
        }
        else if (!this.userCodeIssuedAt.equals(other.userCodeIssuedAt))
            return false;
        if (this.userCodeExpiresAt == null) {
            if (other.userCodeExpiresAt != null)
                return false;
        }
        else if (!this.userCodeExpiresAt.equals(other.userCodeExpiresAt))
            return false;
        if (this.userCodeMetadata == null) {
            if (other.userCodeMetadata != null)
                return false;
        }
        else if (!Arrays.equals(this.userCodeMetadata, other.userCodeMetadata))
            return false;
        if (this.deviceCodeValue == null) {
            if (other.deviceCodeValue != null)
                return false;
        }
        else if (!Arrays.equals(this.deviceCodeValue, other.deviceCodeValue))
            return false;
        if (this.deviceCodeIssuedAt == null) {
            if (other.deviceCodeIssuedAt != null)
                return false;
        }
        else if (!this.deviceCodeIssuedAt.equals(other.deviceCodeIssuedAt))
            return false;
        if (this.deviceCodeExpiresAt == null) {
            if (other.deviceCodeExpiresAt != null)
                return false;
        }
        else if (!this.deviceCodeExpiresAt.equals(other.deviceCodeExpiresAt))
            return false;
        if (this.deviceCodeMetadata == null) {
            if (other.deviceCodeMetadata != null)
                return false;
        }
        else if (!Arrays.equals(this.deviceCodeMetadata, other.deviceCodeMetadata))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.registeredClientId == null) ? 0 : this.registeredClientId.hashCode());
        result = prime * result + ((this.principalName == null) ? 0 : this.principalName.hashCode());
        result = prime * result + ((this.authorizationGrantType == null) ? 0 : this.authorizationGrantType.hashCode());
        result = prime * result + ((this.authorizedScopes == null) ? 0 : this.authorizedScopes.hashCode());
        result = prime * result + ((this.attributes == null) ? 0 : Arrays.hashCode(this.attributes));
        result = prime * result + ((this.state == null) ? 0 : this.state.hashCode());
        result = prime * result + ((this.authorizationCodeValue == null) ? 0 : Arrays.hashCode(this.authorizationCodeValue));
        result = prime * result + ((this.authorizationCodeIssuedAt == null) ? 0 : this.authorizationCodeIssuedAt.hashCode());
        result = prime * result + ((this.authorizationCodeExpiresAt == null) ? 0 : this.authorizationCodeExpiresAt.hashCode());
        result = prime * result + ((this.authorizationCodeMetadata == null) ? 0 : Arrays.hashCode(this.authorizationCodeMetadata));
        result = prime * result + ((this.accessTokenValue == null) ? 0 : Arrays.hashCode(this.accessTokenValue));
        result = prime * result + ((this.accessTokenIssuedAt == null) ? 0 : this.accessTokenIssuedAt.hashCode());
        result = prime * result + ((this.accessTokenExpiresAt == null) ? 0 : this.accessTokenExpiresAt.hashCode());
        result = prime * result + ((this.accessTokenMetadata == null) ? 0 : Arrays.hashCode(this.accessTokenMetadata));
        result = prime * result + ((this.accessTokenType == null) ? 0 : this.accessTokenType.hashCode());
        result = prime * result + ((this.accessTokenScopes == null) ? 0 : this.accessTokenScopes.hashCode());
        result = prime * result + ((this.oidcIdTokenValue == null) ? 0 : Arrays.hashCode(this.oidcIdTokenValue));
        result = prime * result + ((this.oidcIdTokenIssuedAt == null) ? 0 : this.oidcIdTokenIssuedAt.hashCode());
        result = prime * result + ((this.oidcIdTokenExpiresAt == null) ? 0 : this.oidcIdTokenExpiresAt.hashCode());
        result = prime * result + ((this.oidcIdTokenMetadata == null) ? 0 : Arrays.hashCode(this.oidcIdTokenMetadata));
        result = prime * result + ((this.refreshTokenValue == null) ? 0 : Arrays.hashCode(this.refreshTokenValue));
        result = prime * result + ((this.refreshTokenIssuedAt == null) ? 0 : this.refreshTokenIssuedAt.hashCode());
        result = prime * result + ((this.refreshTokenExpiresAt == null) ? 0 : this.refreshTokenExpiresAt.hashCode());
        result = prime * result + ((this.refreshTokenMetadata == null) ? 0 : Arrays.hashCode(this.refreshTokenMetadata));
        result = prime * result + ((this.userCodeValue == null) ? 0 : Arrays.hashCode(this.userCodeValue));
        result = prime * result + ((this.userCodeIssuedAt == null) ? 0 : this.userCodeIssuedAt.hashCode());
        result = prime * result + ((this.userCodeExpiresAt == null) ? 0 : this.userCodeExpiresAt.hashCode());
        result = prime * result + ((this.userCodeMetadata == null) ? 0 : Arrays.hashCode(this.userCodeMetadata));
        result = prime * result + ((this.deviceCodeValue == null) ? 0 : Arrays.hashCode(this.deviceCodeValue));
        result = prime * result + ((this.deviceCodeIssuedAt == null) ? 0 : this.deviceCodeIssuedAt.hashCode());
        result = prime * result + ((this.deviceCodeExpiresAt == null) ? 0 : this.deviceCodeExpiresAt.hashCode());
        result = prime * result + ((this.deviceCodeMetadata == null) ? 0 : Arrays.hashCode(this.deviceCodeMetadata));
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Oauth2Authorization (");

        sb.append(id);
        sb.append(", ").append(registeredClientId);
        sb.append(", ").append(principalName);
        sb.append(", ").append(authorizationGrantType);
        sb.append(", ").append(authorizedScopes);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(state);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(authorizationCodeIssuedAt);
        sb.append(", ").append(authorizationCodeExpiresAt);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(accessTokenIssuedAt);
        sb.append(", ").append(accessTokenExpiresAt);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(accessTokenType);
        sb.append(", ").append(accessTokenScopes);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(oidcIdTokenIssuedAt);
        sb.append(", ").append(oidcIdTokenExpiresAt);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(refreshTokenIssuedAt);
        sb.append(", ").append(refreshTokenExpiresAt);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(userCodeIssuedAt);
        sb.append(", ").append(userCodeExpiresAt);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(deviceCodeIssuedAt);
        sb.append(", ").append(deviceCodeExpiresAt);
        sb.append(", ").append("[binary...]");

        sb.append(")");
        return sb.toString();
    }
}
