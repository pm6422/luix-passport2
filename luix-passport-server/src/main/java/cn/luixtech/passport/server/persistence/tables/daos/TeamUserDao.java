/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables.daos;


import cn.luixtech.passport.server.persistence.tables.TeamUser;
import cn.luixtech.passport.server.persistence.tables.records.TeamUserRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class TeamUserDao extends DAOImpl<TeamUserRecord, cn.luixtech.passport.server.persistence.tables.pojos.TeamUser, String> {

    /**
     * Create a new TeamUserDao without any configuration
     */
    public TeamUserDao() {
        super(TeamUser.TEAM_USER, cn.luixtech.passport.server.persistence.tables.pojos.TeamUser.class);
    }

    /**
     * Create a new TeamUserDao with an attached configuration
     */
    @Autowired
    public TeamUserDao(Configuration configuration) {
        super(TeamUser.TEAM_USER, cn.luixtech.passport.server.persistence.tables.pojos.TeamUser.class, configuration);
    }

    @Override
    public String getId(cn.luixtech.passport.server.persistence.tables.pojos.TeamUser object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.TeamUser> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(TeamUser.TEAM_USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.TeamUser> fetchById(String... values) {
        return fetch(TeamUser.TEAM_USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public cn.luixtech.passport.server.persistence.tables.pojos.TeamUser fetchOneById(String value) {
        return fetchOne(TeamUser.TEAM_USER.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<cn.luixtech.passport.server.persistence.tables.pojos.TeamUser> fetchOptionalById(String value) {
        return fetchOptional(TeamUser.TEAM_USER.ID, value);
    }

    /**
     * Fetch records that have <code>team_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.TeamUser> fetchRangeOfTeamId(String lowerInclusive, String upperInclusive) {
        return fetchRange(TeamUser.TEAM_USER.TEAM_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>team_id IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.TeamUser> fetchByTeamId(String... values) {
        return fetch(TeamUser.TEAM_USER.TEAM_ID, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.TeamUser> fetchRangeOfUserId(String lowerInclusive, String upperInclusive) {
        return fetchRange(TeamUser.TEAM_USER.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.TeamUser> fetchByUserId(String... values) {
        return fetch(TeamUser.TEAM_USER.USER_ID, values);
    }
}
