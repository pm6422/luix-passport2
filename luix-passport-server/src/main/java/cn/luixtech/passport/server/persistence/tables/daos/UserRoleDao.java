/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables.daos;


import cn.luixtech.passport.server.persistence.tables.UserRole;
import cn.luixtech.passport.server.persistence.tables.records.UserRoleRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class UserRoleDao extends DAOImpl<UserRoleRecord, cn.luixtech.passport.server.persistence.tables.pojos.UserRole, String> {

    /**
     * Create a new UserRoleDao without any configuration
     */
    public UserRoleDao() {
        super(UserRole.USER_ROLE, cn.luixtech.passport.server.persistence.tables.pojos.UserRole.class);
    }

    /**
     * Create a new UserRoleDao with an attached configuration
     */
    @Autowired
    public UserRoleDao(Configuration configuration) {
        super(UserRole.USER_ROLE, cn.luixtech.passport.server.persistence.tables.pojos.UserRole.class, configuration);
    }

    @Override
    public String getId(cn.luixtech.passport.server.persistence.tables.pojos.UserRole object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserRole> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserRole> fetchById(String... values) {
        return fetch(UserRole.USER_ROLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public cn.luixtech.passport.server.persistence.tables.pojos.UserRole fetchOneById(String value) {
        return fetchOne(UserRole.USER_ROLE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<cn.luixtech.passport.server.persistence.tables.pojos.UserRole> fetchOptionalById(String value) {
        return fetchOptional(UserRole.USER_ROLE.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserRole> fetchRangeOfUserId(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserRole> fetchByUserId(String... values) {
        return fetch(UserRole.USER_ROLE.USER_ID, values);
    }

    /**
     * Fetch records that have <code>role BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserRole> fetchRangeOfRole(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.ROLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserRole> fetchByRole(String... values) {
        return fetch(UserRole.USER_ROLE.ROLE, values);
    }
}
