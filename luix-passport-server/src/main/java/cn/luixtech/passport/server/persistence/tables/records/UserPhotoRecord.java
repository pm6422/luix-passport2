/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables.records;


import cn.luixtech.passport.server.persistence.tables.UserPhoto;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserPhotoRecord extends UpdatableRecordImpl<UserPhotoRecord> implements Record2<String, byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>luix-passport.user_photo.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>luix-passport.user_photo.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>luix-passport.user_photo.profile_photo</code>.
     */
    public void setProfilePhoto(byte[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>luix-passport.user_photo.profile_photo</code>.
     */
    public byte[] getProfilePhoto() {
        return (byte[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, byte[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return UserPhoto.USER_PHOTO.ID;
    }

    @Override
    public Field<byte[]> field2() {
        return UserPhoto.USER_PHOTO.PROFILE_PHOTO;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public byte[] component2() {
        return getProfilePhoto();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public byte[] value2() {
        return getProfilePhoto();
    }

    @Override
    public UserPhotoRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public UserPhotoRecord value2(byte[] value) {
        setProfilePhoto(value);
        return this;
    }

    @Override
    public UserPhotoRecord values(String value1, byte[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserPhotoRecord
     */
    public UserPhotoRecord() {
        super(UserPhoto.USER_PHOTO);
    }

    /**
     * Create a detached, initialised UserPhotoRecord
     */
    public UserPhotoRecord(String id, byte[] profilePhoto) {
        super(UserPhoto.USER_PHOTO);

        setId(id);
        setProfilePhoto(profilePhoto);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserPhotoRecord
     */
    public UserPhotoRecord(cn.luixtech.passport.server.persistence.tables.pojos.UserPhoto value) {
        super(UserPhoto.USER_PHOTO);

        if (value != null) {
            setId(value.getId());
            setProfilePhoto(value.getProfilePhoto());
            resetChangedOnNotNull();
        }
    }
}
