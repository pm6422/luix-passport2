/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables.records;


import cn.luixtech.passport.server.persistence.tables.UserAuthority;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserAuthorityRecord extends UpdatableRecordImpl<UserAuthorityRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>luix-passport.user_authority.user_id</code>.
     */
    public void setUserId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>luix-passport.user_authority.user_id</code>.
     */
    @NotNull
    @Size(max = 20)
    public String getUserId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>luix-passport.user_authority.authority</code>.
     */
    public void setAuthority(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>luix-passport.user_authority.authority</code>.
     */
    @NotNull
    @Size(max = 36)
    public String getAuthority() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return UserAuthority.USER_AUTHORITY.USER_ID;
    }

    @Override
    public Field<String> field2() {
        return UserAuthority.USER_AUTHORITY.AUTHORITY;
    }

    @Override
    public String component1() {
        return getUserId();
    }

    @Override
    public String component2() {
        return getAuthority();
    }

    @Override
    public String value1() {
        return getUserId();
    }

    @Override
    public String value2() {
        return getAuthority();
    }

    @Override
    public UserAuthorityRecord value1(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserAuthorityRecord value2(String value) {
        setAuthority(value);
        return this;
    }

    @Override
    public UserAuthorityRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserAuthorityRecord
     */
    public UserAuthorityRecord() {
        super(UserAuthority.USER_AUTHORITY);
    }

    /**
     * Create a detached, initialised UserAuthorityRecord
     */
    public UserAuthorityRecord(String userId, String authority) {
        super(UserAuthority.USER_AUTHORITY);

        setUserId(userId);
        setAuthority(authority);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserAuthorityRecord
     */
    public UserAuthorityRecord(cn.luixtech.passport.server.persistence.tables.pojos.UserAuthority value) {
        super(UserAuthority.USER_AUTHORITY);

        if (value != null) {
            setUserId(value.getUserId());
            setAuthority(value.getAuthority());
            resetChangedOnNotNull();
        }
    }
}
