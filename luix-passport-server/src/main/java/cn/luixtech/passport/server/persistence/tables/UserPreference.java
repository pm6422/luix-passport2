/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.LuixPassport;
import cn.luixtech.passport.server.persistence.tables.records.UserPreferenceRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserPreference extends TableImpl<UserPreferenceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>luix-passport.user_preference</code>
     */
    public static final UserPreference USER_PREFERENCE = new UserPreference();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPreferenceRecord> getRecordType() {
        return UserPreferenceRecord.class;
    }

    /**
     * The column <code>luix-passport.user_preference.user_id</code>.
     */
    public final TableField<UserPreferenceRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>luix-passport.user_preference.locale</code>.
     */
    public final TableField<UserPreferenceRecord, String> LOCALE = createField(DSL.name("locale"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>luix-passport.user_preference.time_zone</code>.
     */
    public final TableField<UserPreferenceRecord, String> TIME_ZONE = createField(DSL.name("time_zone"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>luix-passport.user_preference.date_format</code>.
     */
    public final TableField<UserPreferenceRecord, String> DATE_FORMAT = createField(DSL.name("date_format"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    private UserPreference(Name alias, Table<UserPreferenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPreference(Name alias, Table<UserPreferenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>luix-passport.user_preference</code> table
     * reference
     */
    public UserPreference(String alias) {
        this(DSL.name(alias), USER_PREFERENCE);
    }

    /**
     * Create an aliased <code>luix-passport.user_preference</code> table
     * reference
     */
    public UserPreference(Name alias) {
        this(alias, USER_PREFERENCE);
    }

    /**
     * Create a <code>luix-passport.user_preference</code> table reference
     */
    public UserPreference() {
        this(DSL.name("user_preference"), null);
    }

    public <O extends Record> UserPreference(Table<O> child, ForeignKey<O, UserPreferenceRecord> key) {
        super(child, key, USER_PREFERENCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LuixPassport.LUIX_PASSPORT;
    }

    @Override
    public UniqueKey<UserPreferenceRecord> getPrimaryKey() {
        return Keys.KEY_USER_PREFERENCE_PRIMARY;
    }

    @Override
    public List<ForeignKey<UserPreferenceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_USER_PREFERENCE_USER_ID);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>luix-passport.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.FK_USER_PREFERENCE_USER_ID);

        return _user;
    }

    @Override
    public UserPreference as(String alias) {
        return new UserPreference(DSL.name(alias), this);
    }

    @Override
    public UserPreference as(Name alias) {
        return new UserPreference(alias, this);
    }

    @Override
    public UserPreference as(Table<?> alias) {
        return new UserPreference(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPreference rename(String name) {
        return new UserPreference(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPreference rename(Name name) {
        return new UserPreference(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPreference rename(Table<?> name) {
        return new UserPreference(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
