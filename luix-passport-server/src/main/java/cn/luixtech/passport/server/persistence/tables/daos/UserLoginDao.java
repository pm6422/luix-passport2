/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables.daos;


import cn.luixtech.passport.server.persistence.tables.UserLogin;
import cn.luixtech.passport.server.persistence.tables.records.UserLoginRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class UserLoginDao extends DAOImpl<UserLoginRecord, cn.luixtech.passport.server.persistence.tables.pojos.UserLogin, String> {

    /**
     * Create a new UserLoginDao without any configuration
     */
    public UserLoginDao() {
        super(UserLogin.USER_LOGIN, cn.luixtech.passport.server.persistence.tables.pojos.UserLogin.class);
    }

    /**
     * Create a new UserLoginDao with an attached configuration
     */
    @Autowired
    public UserLoginDao(Configuration configuration) {
        super(UserLogin.USER_LOGIN, cn.luixtech.passport.server.persistence.tables.pojos.UserLogin.class, configuration);
    }

    @Override
    public String getId(cn.luixtech.passport.server.persistence.tables.pojos.UserLogin object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserLogin.USER_LOGIN.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchById(String... values) {
        return fetch(UserLogin.USER_LOGIN.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public cn.luixtech.passport.server.persistence.tables.pojos.UserLogin fetchOneById(String value) {
        return fetchOne(UserLogin.USER_LOGIN.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchOptionalById(String value) {
        return fetchOptional(UserLogin.USER_LOGIN.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchRangeOfUserId(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserLogin.USER_LOGIN.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchByUserId(String... values) {
        return fetch(UserLogin.USER_LOGIN.USER_ID, values);
    }

    /**
     * Fetch records that have <code>logged_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchRangeOfLoggedTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserLogin.USER_LOGIN.LOGGED_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>logged_time IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchByLoggedTime(LocalDateTime... values) {
        return fetch(UserLogin.USER_LOGIN.LOGGED_TIME, values);
    }

    /**
     * Fetch records that have <code>location BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchRangeOfLocation(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserLogin.USER_LOGIN.LOCATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>location IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchByLocation(String... values) {
        return fetch(UserLogin.USER_LOGIN.LOCATION, values);
    }

    /**
     * Fetch records that have <code>ip BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchRangeOfIp(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserLogin.USER_LOGIN.IP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ip IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchByIp(String... values) {
        return fetch(UserLogin.USER_LOGIN.IP, values);
    }

    /**
     * Fetch records that have <code>os BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchRangeOfOs(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserLogin.USER_LOGIN.OS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>os IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchByOs(String... values) {
        return fetch(UserLogin.USER_LOGIN.OS, values);
    }

    /**
     * Fetch records that have <code>browser BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchRangeOfBrowser(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserLogin.USER_LOGIN.BROWSER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>browser IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.UserLogin> fetchByBrowser(String... values) {
        return fetch(UserLogin.USER_LOGIN.BROWSER, values);
    }
}
