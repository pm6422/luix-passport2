/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.LuixPassport;
import cn.luixtech.passport.server.persistence.tables.records.SeqNumberRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SeqNumber extends TableImpl<SeqNumberRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>luix-passport.seq_number</code>
     */
    public static final SeqNumber SEQ_NUMBER = new SeqNumber();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SeqNumberRecord> getRecordType() {
        return SeqNumberRecord.class;
    }

    /**
     * The column <code>luix-passport.seq_number.id</code>.
     */
    public final TableField<SeqNumberRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>luix-passport.seq_number.table_name</code>.
     */
    public final TableField<SeqNumberRecord, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>luix-passport.seq_number.max_seq_num</code>.
     */
    public final TableField<SeqNumberRecord, Long> MAX_SEQ_NUM = createField(DSL.name("max_seq_num"), SQLDataType.BIGINT.nullable(false), this, "");

    private SeqNumber(Name alias, Table<SeqNumberRecord> aliased) {
        this(alias, aliased, null);
    }

    private SeqNumber(Name alias, Table<SeqNumberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>luix-passport.seq_number</code> table reference
     */
    public SeqNumber(String alias) {
        this(DSL.name(alias), SEQ_NUMBER);
    }

    /**
     * Create an aliased <code>luix-passport.seq_number</code> table reference
     */
    public SeqNumber(Name alias) {
        this(alias, SEQ_NUMBER);
    }

    /**
     * Create a <code>luix-passport.seq_number</code> table reference
     */
    public SeqNumber() {
        this(DSL.name("seq_number"), null);
    }

    public <O extends Record> SeqNumber(Table<O> child, ForeignKey<O, SeqNumberRecord> key) {
        super(child, key, SEQ_NUMBER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LuixPassport.LUIX_PASSPORT;
    }

    @Override
    public UniqueKey<SeqNumberRecord> getPrimaryKey() {
        return Keys.KEY_SEQ_NUMBER_PRIMARY;
    }

    @Override
    public SeqNumber as(String alias) {
        return new SeqNumber(DSL.name(alias), this);
    }

    @Override
    public SeqNumber as(Name alias) {
        return new SeqNumber(alias, this);
    }

    @Override
    public SeqNumber as(Table<?> alias) {
        return new SeqNumber(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SeqNumber rename(String name) {
        return new SeqNumber(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SeqNumber rename(Name name) {
        return new SeqNumber(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SeqNumber rename(Table<?> name) {
        return new SeqNumber(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
