/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables.daos;


import cn.luixtech.passport.server.persistence.tables.Team;
import cn.luixtech.passport.server.persistence.tables.records.TeamRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class TeamDao extends DAOImpl<TeamRecord, cn.luixtech.passport.server.persistence.tables.pojos.Team, String> {

    /**
     * Create a new TeamDao without any configuration
     */
    public TeamDao() {
        super(Team.TEAM, cn.luixtech.passport.server.persistence.tables.pojos.Team.class);
    }

    /**
     * Create a new TeamDao with an attached configuration
     */
    @Autowired
    public TeamDao(Configuration configuration) {
        super(Team.TEAM, cn.luixtech.passport.server.persistence.tables.pojos.Team.class, configuration);
    }

    @Override
    public String getId(cn.luixtech.passport.server.persistence.tables.pojos.Team object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.Team> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Team.TEAM.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.Team> fetchById(String... values) {
        return fetch(Team.TEAM.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public cn.luixtech.passport.server.persistence.tables.pojos.Team fetchOneById(String value) {
        return fetchOne(Team.TEAM.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<cn.luixtech.passport.server.persistence.tables.pojos.Team> fetchOptionalById(String value) {
        return fetchOptional(Team.TEAM.ID, value);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.Team> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Team.TEAM.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.Team> fetchByDescription(String... values) {
        return fetch(Team.TEAM.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.Team> fetchRangeOfEnabled(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Team.TEAM.ENABLED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.Team> fetchByEnabled(Boolean... values) {
        return fetch(Team.TEAM.ENABLED, values);
    }

    /**
     * Fetch records that have <code>photo BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.Team> fetchRangeOfPhoto(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(Team.TEAM.PHOTO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>photo IN (values)</code>
     */
    public List<cn.luixtech.passport.server.persistence.tables.pojos.Team> fetchByPhoto(byte[]... values) {
        return fetch(Team.TEAM.PHOTO, values);
    }
}
