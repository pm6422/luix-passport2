/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables.pojos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.util.Arrays;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SpringSessionAttributes implements Serializable {

    private static final long serialVersionUID = 1L;

    private String sessionPrimaryId;
    private String attributeName;
    private byte[] attributeBytes;

    public SpringSessionAttributes() {}

    public SpringSessionAttributes(SpringSessionAttributes value) {
        this.sessionPrimaryId = value.sessionPrimaryId;
        this.attributeName = value.attributeName;
        this.attributeBytes = value.attributeBytes;
    }

    public SpringSessionAttributes(
        String sessionPrimaryId,
        String attributeName,
        byte[] attributeBytes
    ) {
        this.sessionPrimaryId = sessionPrimaryId;
        this.attributeName = attributeName;
        this.attributeBytes = attributeBytes;
    }

    /**
     * Getter for
     * <code>luix-passport.spring_session_attributes.SESSION_PRIMARY_ID</code>.
     */
    @NotNull
    @Size(max = 36)
    public String getSessionPrimaryId() {
        return this.sessionPrimaryId;
    }

    /**
     * Setter for
     * <code>luix-passport.spring_session_attributes.SESSION_PRIMARY_ID</code>.
     */
    public void setSessionPrimaryId(String sessionPrimaryId) {
        this.sessionPrimaryId = sessionPrimaryId;
    }

    /**
     * Getter for
     * <code>luix-passport.spring_session_attributes.ATTRIBUTE_NAME</code>.
     */
    @NotNull
    @Size(max = 200)
    public String getAttributeName() {
        return this.attributeName;
    }

    /**
     * Setter for
     * <code>luix-passport.spring_session_attributes.ATTRIBUTE_NAME</code>.
     */
    public void setAttributeName(String attributeName) {
        this.attributeName = attributeName;
    }

    /**
     * Getter for
     * <code>luix-passport.spring_session_attributes.ATTRIBUTE_BYTES</code>.
     */
    @NotNull
    @Size(max = 65535)
    public byte[] getAttributeBytes() {
        return this.attributeBytes;
    }

    /**
     * Setter for
     * <code>luix-passport.spring_session_attributes.ATTRIBUTE_BYTES</code>.
     */
    public void setAttributeBytes(byte[] attributeBytes) {
        this.attributeBytes = attributeBytes;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final SpringSessionAttributes other = (SpringSessionAttributes) obj;
        if (this.sessionPrimaryId == null) {
            if (other.sessionPrimaryId != null)
                return false;
        }
        else if (!this.sessionPrimaryId.equals(other.sessionPrimaryId))
            return false;
        if (this.attributeName == null) {
            if (other.attributeName != null)
                return false;
        }
        else if (!this.attributeName.equals(other.attributeName))
            return false;
        if (this.attributeBytes == null) {
            if (other.attributeBytes != null)
                return false;
        }
        else if (!Arrays.equals(this.attributeBytes, other.attributeBytes))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.sessionPrimaryId == null) ? 0 : this.sessionPrimaryId.hashCode());
        result = prime * result + ((this.attributeName == null) ? 0 : this.attributeName.hashCode());
        result = prime * result + ((this.attributeBytes == null) ? 0 : Arrays.hashCode(this.attributeBytes));
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SpringSessionAttributes (");

        sb.append(sessionPrimaryId);
        sb.append(", ").append(attributeName);
        sb.append(", ").append("[binary...]");

        sb.append(")");
        return sb.toString();
    }
}
