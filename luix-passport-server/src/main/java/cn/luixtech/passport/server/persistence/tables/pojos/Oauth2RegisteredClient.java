/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Oauth2RegisteredClient implements Serializable {

    private static final long serialVersionUID = 1L;

    private String        id;
    private String        clientId;
    private LocalDateTime clientIdIssuedAt;
    private String        clientSecret;
    private LocalDateTime clientSecretExpiresAt;
    private String        clientName;
    private String        clientAuthenticationMethods;
    private String        authorizationGrantTypes;
    private String        redirectUris;
    private String        postLogoutRedirectUris;
    private String        scopes;
    private String        clientSettings;
    private String        tokenSettings;

    public Oauth2RegisteredClient() {}

    public Oauth2RegisteredClient(Oauth2RegisteredClient value) {
        this.id = value.id;
        this.clientId = value.clientId;
        this.clientIdIssuedAt = value.clientIdIssuedAt;
        this.clientSecret = value.clientSecret;
        this.clientSecretExpiresAt = value.clientSecretExpiresAt;
        this.clientName = value.clientName;
        this.clientAuthenticationMethods = value.clientAuthenticationMethods;
        this.authorizationGrantTypes = value.authorizationGrantTypes;
        this.redirectUris = value.redirectUris;
        this.postLogoutRedirectUris = value.postLogoutRedirectUris;
        this.scopes = value.scopes;
        this.clientSettings = value.clientSettings;
        this.tokenSettings = value.tokenSettings;
    }

    public Oauth2RegisteredClient(
        String        id,
        String        clientId,
        LocalDateTime clientIdIssuedAt,
        String        clientSecret,
        LocalDateTime clientSecretExpiresAt,
        String        clientName,
        String        clientAuthenticationMethods,
        String        authorizationGrantTypes,
        String        redirectUris,
        String        postLogoutRedirectUris,
        String        scopes,
        String        clientSettings,
        String        tokenSettings
    ) {
        this.id = id;
        this.clientId = clientId;
        this.clientIdIssuedAt = clientIdIssuedAt;
        this.clientSecret = clientSecret;
        this.clientSecretExpiresAt = clientSecretExpiresAt;
        this.clientName = clientName;
        this.clientAuthenticationMethods = clientAuthenticationMethods;
        this.authorizationGrantTypes = authorizationGrantTypes;
        this.redirectUris = redirectUris;
        this.postLogoutRedirectUris = postLogoutRedirectUris;
        this.scopes = scopes;
        this.clientSettings = clientSettings;
        this.tokenSettings = tokenSettings;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.id</code>.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.id</code>.
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.client_id</code>.
     */
    public String getClientId() {
        return this.clientId;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.client_id</code>.
     */
    public void setClientId(String clientId) {
        this.clientId = clientId;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.client_id_issued_at</code>.
     */
    public LocalDateTime getClientIdIssuedAt() {
        return this.clientIdIssuedAt;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.client_id_issued_at</code>.
     */
    public void setClientIdIssuedAt(LocalDateTime clientIdIssuedAt) {
        this.clientIdIssuedAt = clientIdIssuedAt;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.client_secret</code>.
     */
    public String getClientSecret() {
        return this.clientSecret;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.client_secret</code>.
     */
    public void setClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.client_secret_expires_at</code>.
     */
    public LocalDateTime getClientSecretExpiresAt() {
        return this.clientSecretExpiresAt;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.client_secret_expires_at</code>.
     */
    public void setClientSecretExpiresAt(LocalDateTime clientSecretExpiresAt) {
        this.clientSecretExpiresAt = clientSecretExpiresAt;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.client_name</code>.
     */
    public String getClientName() {
        return this.clientName;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.client_name</code>.
     */
    public void setClientName(String clientName) {
        this.clientName = clientName;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.client_authentication_methods</code>.
     */
    public String getClientAuthenticationMethods() {
        return this.clientAuthenticationMethods;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.client_authentication_methods</code>.
     */
    public void setClientAuthenticationMethods(String clientAuthenticationMethods) {
        this.clientAuthenticationMethods = clientAuthenticationMethods;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.authorization_grant_types</code>.
     */
    public String getAuthorizationGrantTypes() {
        return this.authorizationGrantTypes;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.authorization_grant_types</code>.
     */
    public void setAuthorizationGrantTypes(String authorizationGrantTypes) {
        this.authorizationGrantTypes = authorizationGrantTypes;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.redirect_uris</code>.
     */
    public String getRedirectUris() {
        return this.redirectUris;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.redirect_uris</code>.
     */
    public void setRedirectUris(String redirectUris) {
        this.redirectUris = redirectUris;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.post_logout_redirect_uris</code>.
     */
    public String getPostLogoutRedirectUris() {
        return this.postLogoutRedirectUris;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.post_logout_redirect_uris</code>.
     */
    public void setPostLogoutRedirectUris(String postLogoutRedirectUris) {
        this.postLogoutRedirectUris = postLogoutRedirectUris;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.scopes</code>.
     */
    public String getScopes() {
        return this.scopes;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.scopes</code>.
     */
    public void setScopes(String scopes) {
        this.scopes = scopes;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.client_settings</code>.
     */
    public String getClientSettings() {
        return this.clientSettings;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.client_settings</code>.
     */
    public void setClientSettings(String clientSettings) {
        this.clientSettings = clientSettings;
    }

    /**
     * Getter for <code>luix-passport2.oauth2_registered_client.token_settings</code>.
     */
    public String getTokenSettings() {
        return this.tokenSettings;
    }

    /**
     * Setter for <code>luix-passport2.oauth2_registered_client.token_settings</code>.
     */
    public void setTokenSettings(String tokenSettings) {
        this.tokenSettings = tokenSettings;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Oauth2RegisteredClient other = (Oauth2RegisteredClient) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (clientId == null) {
            if (other.clientId != null)
                return false;
        }
        else if (!clientId.equals(other.clientId))
            return false;
        if (clientIdIssuedAt == null) {
            if (other.clientIdIssuedAt != null)
                return false;
        }
        else if (!clientIdIssuedAt.equals(other.clientIdIssuedAt))
            return false;
        if (clientSecret == null) {
            if (other.clientSecret != null)
                return false;
        }
        else if (!clientSecret.equals(other.clientSecret))
            return false;
        if (clientSecretExpiresAt == null) {
            if (other.clientSecretExpiresAt != null)
                return false;
        }
        else if (!clientSecretExpiresAt.equals(other.clientSecretExpiresAt))
            return false;
        if (clientName == null) {
            if (other.clientName != null)
                return false;
        }
        else if (!clientName.equals(other.clientName))
            return false;
        if (clientAuthenticationMethods == null) {
            if (other.clientAuthenticationMethods != null)
                return false;
        }
        else if (!clientAuthenticationMethods.equals(other.clientAuthenticationMethods))
            return false;
        if (authorizationGrantTypes == null) {
            if (other.authorizationGrantTypes != null)
                return false;
        }
        else if (!authorizationGrantTypes.equals(other.authorizationGrantTypes))
            return false;
        if (redirectUris == null) {
            if (other.redirectUris != null)
                return false;
        }
        else if (!redirectUris.equals(other.redirectUris))
            return false;
        if (postLogoutRedirectUris == null) {
            if (other.postLogoutRedirectUris != null)
                return false;
        }
        else if (!postLogoutRedirectUris.equals(other.postLogoutRedirectUris))
            return false;
        if (scopes == null) {
            if (other.scopes != null)
                return false;
        }
        else if (!scopes.equals(other.scopes))
            return false;
        if (clientSettings == null) {
            if (other.clientSettings != null)
                return false;
        }
        else if (!clientSettings.equals(other.clientSettings))
            return false;
        if (tokenSettings == null) {
            if (other.tokenSettings != null)
                return false;
        }
        else if (!tokenSettings.equals(other.tokenSettings))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.clientId == null) ? 0 : this.clientId.hashCode());
        result = prime * result + ((this.clientIdIssuedAt == null) ? 0 : this.clientIdIssuedAt.hashCode());
        result = prime * result + ((this.clientSecret == null) ? 0 : this.clientSecret.hashCode());
        result = prime * result + ((this.clientSecretExpiresAt == null) ? 0 : this.clientSecretExpiresAt.hashCode());
        result = prime * result + ((this.clientName == null) ? 0 : this.clientName.hashCode());
        result = prime * result + ((this.clientAuthenticationMethods == null) ? 0 : this.clientAuthenticationMethods.hashCode());
        result = prime * result + ((this.authorizationGrantTypes == null) ? 0 : this.authorizationGrantTypes.hashCode());
        result = prime * result + ((this.redirectUris == null) ? 0 : this.redirectUris.hashCode());
        result = prime * result + ((this.postLogoutRedirectUris == null) ? 0 : this.postLogoutRedirectUris.hashCode());
        result = prime * result + ((this.scopes == null) ? 0 : this.scopes.hashCode());
        result = prime * result + ((this.clientSettings == null) ? 0 : this.clientSettings.hashCode());
        result = prime * result + ((this.tokenSettings == null) ? 0 : this.tokenSettings.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Oauth2RegisteredClient (");

        sb.append(id);
        sb.append(", ").append(clientId);
        sb.append(", ").append(clientIdIssuedAt);
        sb.append(", ").append(clientSecret);
        sb.append(", ").append(clientSecretExpiresAt);
        sb.append(", ").append(clientName);
        sb.append(", ").append(clientAuthenticationMethods);
        sb.append(", ").append(authorizationGrantTypes);
        sb.append(", ").append(redirectUris);
        sb.append(", ").append(postLogoutRedirectUris);
        sb.append(", ").append(scopes);
        sb.append(", ").append(clientSettings);
        sb.append(", ").append(tokenSettings);

        sb.append(")");
        return sb.toString();
    }
}
