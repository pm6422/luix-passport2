/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.LuixPassport;
import cn.luixtech.passport.server.persistence.tables.records.UserAuthenticationEventRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserAuthenticationEvent extends TableImpl<UserAuthenticationEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>luix-passport.user_authentication_event</code>
     */
    public static final UserAuthenticationEvent USER_AUTHENTICATION_EVENT = new UserAuthenticationEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAuthenticationEventRecord> getRecordType() {
        return UserAuthenticationEventRecord.class;
    }

    /**
     * The column <code>luix-passport.user_authentication_event.id</code>.
     */
    public final TableField<UserAuthenticationEventRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>luix-passport.user_authentication_event.user_id</code>.
     */
    public final TableField<UserAuthenticationEventRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>luix-passport.user_authentication_event.event</code>.
     */
    public final TableField<UserAuthenticationEventRecord, String> EVENT = createField(DSL.name("event"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column
     * <code>luix-passport.user_authentication_event.description</code>.
     */
    public final TableField<UserAuthenticationEventRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>luix-passport.user_authentication_event.created_time</code>.
     */
    public final TableField<UserAuthenticationEventRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private UserAuthenticationEvent(Name alias, Table<UserAuthenticationEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAuthenticationEvent(Name alias, Table<UserAuthenticationEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>luix-passport.user_authentication_event</code>
     * table reference
     */
    public UserAuthenticationEvent(String alias) {
        this(DSL.name(alias), USER_AUTHENTICATION_EVENT);
    }

    /**
     * Create an aliased <code>luix-passport.user_authentication_event</code>
     * table reference
     */
    public UserAuthenticationEvent(Name alias) {
        this(alias, USER_AUTHENTICATION_EVENT);
    }

    /**
     * Create a <code>luix-passport.user_authentication_event</code> table
     * reference
     */
    public UserAuthenticationEvent() {
        this(DSL.name("user_authentication_event"), null);
    }

    public <O extends Record> UserAuthenticationEvent(Table<O> child, ForeignKey<O, UserAuthenticationEventRecord> key) {
        super(child, key, USER_AUTHENTICATION_EVENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : LuixPassport.LUIX_PASSPORT;
    }

    @Override
    public UniqueKey<UserAuthenticationEventRecord> getPrimaryKey() {
        return Keys.KEY_USER_AUTHENTICATION_EVENT_PRIMARY;
    }

    @Override
    public UserAuthenticationEvent as(String alias) {
        return new UserAuthenticationEvent(DSL.name(alias), this);
    }

    @Override
    public UserAuthenticationEvent as(Name alias) {
        return new UserAuthenticationEvent(alias, this);
    }

    @Override
    public UserAuthenticationEvent as(Table<?> alias) {
        return new UserAuthenticationEvent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAuthenticationEvent rename(String name) {
        return new UserAuthenticationEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAuthenticationEvent rename(Name name) {
        return new UserAuthenticationEvent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAuthenticationEvent rename(Table<?> name) {
        return new UserAuthenticationEvent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
