/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables.records;


import cn.luixtech.passport.server.persistence.tables.Tenant;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TenantRecord extends UpdatableRecordImpl<TenantRecord> implements Record4<String, String, Boolean, byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>luix-passport.tenant.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>luix-passport.tenant.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>luix-passport.tenant.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>luix-passport.tenant.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>luix-passport.tenant.enabled</code>.
     */
    public void setEnabled(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>luix-passport.tenant.enabled</code>.
     */
    public Boolean getEnabled() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>luix-passport.tenant.photo</code>.
     */
    public void setPhoto(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>luix-passport.tenant.photo</code>.
     */
    public byte[] getPhoto() {
        return (byte[]) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Boolean, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, Boolean, byte[]> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Tenant.TENANT.ID;
    }

    @Override
    public Field<String> field2() {
        return Tenant.TENANT.NAME;
    }

    @Override
    public Field<Boolean> field3() {
        return Tenant.TENANT.ENABLED;
    }

    @Override
    public Field<byte[]> field4() {
        return Tenant.TENANT.PHOTO;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Boolean component3() {
        return getEnabled();
    }

    @Override
    public byte[] component4() {
        return getPhoto();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Boolean value3() {
        return getEnabled();
    }

    @Override
    public byte[] value4() {
        return getPhoto();
    }

    @Override
    public TenantRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public TenantRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public TenantRecord value3(Boolean value) {
        setEnabled(value);
        return this;
    }

    @Override
    public TenantRecord value4(byte[] value) {
        setPhoto(value);
        return this;
    }

    @Override
    public TenantRecord values(String value1, String value2, Boolean value3, byte[] value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TenantRecord
     */
    public TenantRecord() {
        super(Tenant.TENANT);
    }

    /**
     * Create a detached, initialised TenantRecord
     */
    public TenantRecord(String id, String name, Boolean enabled, byte[] photo) {
        super(Tenant.TENANT);

        setId(id);
        setName(name);
        setEnabled(enabled);
        setPhoto(photo);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TenantRecord
     */
    public TenantRecord(cn.luixtech.passport.server.persistence.tables.pojos.Tenant value) {
        super(Tenant.TENANT);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setEnabled(value.getEnabled());
            setPhoto(value.getPhoto());
            resetChangedOnNotNull();
        }
    }
}
