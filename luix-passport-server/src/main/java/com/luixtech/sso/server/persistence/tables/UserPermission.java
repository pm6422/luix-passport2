/*
 * This file is generated by jOOQ.
 */
package com.luixtech.sso.server.persistence.tables;


import com.luixtech.sso.server.persistence.Keys;
import com.luixtech.sso.server.persistence.LuixSso;
import com.luixtech.sso.server.persistence.tables.records.UserPermissionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserPermission extends TableImpl<UserPermissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>luix-sso.user_permission</code>
     */
    public static final UserPermission USER_PERMISSION = new UserPermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPermissionRecord> getRecordType() {
        return UserPermissionRecord.class;
    }

    /**
     * The column <code>luix-sso.user_permission.user_id</code>.
     */
    public final TableField<UserPermissionRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>luix-sso.user_permission.permission</code>.
     */
    public final TableField<UserPermissionRecord, String> PERMISSION = createField(DSL.name("permission"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private UserPermission(Name alias, Table<UserPermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPermission(Name alias, Table<UserPermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>luix-sso.user_permission</code> table reference
     */
    public UserPermission(String alias) {
        this(DSL.name(alias), USER_PERMISSION);
    }

    /**
     * Create an aliased <code>luix-sso.user_permission</code> table reference
     */
    public UserPermission(Name alias) {
        this(alias, USER_PERMISSION);
    }

    /**
     * Create a <code>luix-sso.user_permission</code> table reference
     */
    public UserPermission() {
        this(DSL.name("user_permission"), null);
    }

    public <O extends Record> UserPermission(Table<O> child, ForeignKey<O, UserPermissionRecord> key) {
        super(child, key, USER_PERMISSION);
    }

    @Override
    public Schema getSchema() {
        return LuixSso.LUIX_SSO;
    }

    @Override
    public UniqueKey<UserPermissionRecord> getPrimaryKey() {
        return Keys.KEY_USER_PERMISSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserPermissionRecord>> getKeys() {
        return Arrays.<UniqueKey<UserPermissionRecord>>asList(Keys.KEY_USER_PERMISSION_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserPermissionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserPermissionRecord, ?>>asList(Keys.FK_USER_PERMISSION_USER_ID);
    }

    private transient User _user;

    public User user() {
        if (_user == null)
            _user = new User(this, Keys.FK_USER_PERMISSION_USER_ID);

        return _user;
    }

    @Override
    public UserPermission as(String alias) {
        return new UserPermission(DSL.name(alias), this);
    }

    @Override
    public UserPermission as(Name alias) {
        return new UserPermission(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPermission rename(String name) {
        return new UserPermission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPermission rename(Name name) {
        return new UserPermission(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
