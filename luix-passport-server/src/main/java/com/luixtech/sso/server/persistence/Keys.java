/*
 * This file is generated by jOOQ.
 */
package com.luixtech.sso.server.persistence;


import com.luixtech.sso.server.persistence.tables.User;
import com.luixtech.sso.server.persistence.tables.UserPermission;
import com.luixtech.sso.server.persistence.tables.UserRole;
import com.luixtech.sso.server.persistence.tables.records.UserPermissionRecord;
import com.luixtech.sso.server.persistence.tables.records.UserRecord;
import com.luixtech.sso.server.persistence.tables.records.UserRoleRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * luix-sso.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_UX_USER_EMAIL = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_ux_user_email"), new TableField[] { User.USER.EMAIL }, true);
    public static final UniqueKey<UserRecord> KEY_USER_UX_USER_MOBILE = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_ux_user_mobile"), new TableField[] { User.USER.MOBILE_NO }, true);
    public static final UniqueKey<UserRecord> KEY_USER_UX_USER_USERNAME = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_ux_user_username"), new TableField[] { User.USER.USERNAME }, true);
    public static final UniqueKey<UserPermissionRecord> KEY_USER_PERMISSION_PRIMARY = Internal.createUniqueKey(UserPermission.USER_PERMISSION, DSL.name("KEY_user_permission_PRIMARY"), new TableField[] { UserPermission.USER_PERMISSION.USER_ID, UserPermission.USER_PERMISSION.PERMISSION }, true);
    public static final UniqueKey<UserRoleRecord> KEY_USER_ROLE_PRIMARY = Internal.createUniqueKey(UserRole.USER_ROLE, DSL.name("KEY_user_role_PRIMARY"), new TableField[] { UserRole.USER_ROLE.USER_ID, UserRole.USER_ROLE.ROLE }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<UserPermissionRecord, UserRecord> FK_USER_PERMISSION_USER_ID = Internal.createForeignKey(UserPermission.USER_PERMISSION, DSL.name("fk_user_permission_user_id"), new TableField[] { UserPermission.USER_PERMISSION.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<UserRoleRecord, UserRecord> FK_USER_ROLE_USER_ID = Internal.createForeignKey(UserRole.USER_ROLE, DSL.name("fk_user_role_user_id"), new TableField[] { UserRole.USER_ROLE.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
}
